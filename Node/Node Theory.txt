Node.js: is an open source, cross-platform javascript runtime environment.

1. open source: source code is publicly available for sharing and modification(github)
2. cross-platform: (operating systems) available for Mac, Windows and Linux. 
3. javascript runtime environment: provides all the necessary components in order to use 
		and run the javascript program outside of the browser.
--------------------------------------------------------------------------------------

ECMAScript: 
	
	1993, first browser with UI, Mosaic
	
	1994, lead developers of Mosaic founded a company called Netscape
		and a polished version of Mosaic was released with the name 
		"Netscape Navigator" (it only supported static pages)
	
	1995, Netscape created their own scripting language called JavaScript.
		(the name JavaScript was only for marketing purpose)
	
	1995, Microsoft released their own browser Internet Explorer
		Microsoft developers reverse-engineered the Netscape Interpreter and 
		created their own scripting language called JScript
	
	Developers have to label the website with "Best viewed in Netscape Navigator"
		"Best viewed in Internet Explorer"
		
	1996, Netscape submitted the JavaScript to an organization called "ECMA Internationals".
		It is an org which standardizes the information and communication system.
	
	ECMA provided a standard specification and a committee for javascript -> "ECMAScript"
		Specification -> ECMA-262
		Committee 	  -> TC-39
----------------------------
ECMAScript versions: 

	1997: ECMAScript - 1
	1998: ECMAScript - 2
	1999: ECMAScript - 3
	2009: ECMAScript - 5
	2015: ECMAScript 2015 (ES6)
	
==========================================================================================

JavaScript Engine:	it is a program which converts JS code to machine code.
	Each browser vendor has their own JS engine
	
	Ex:
		âœ” V8 --> Google for Chrome
		SpiderMonkey -> Mozilla Firefox
		JavaScriptCore -> Apple for Safari
		Chakra -> Microsoft for Edge (original)
				Modern Edge uses V8 engine
				
V8 Engine: is written in C++ --> it is great for low level tasks such as
		file handling, networking, database connection.
		

Node.js Source Code 
	deps -> dependencies --> v8(engine), uv(operating system) / libuv, etc...
	scr  -> (source code / main code) -> C / C++ featuers
	lib  -> JS library -> js code --> internally communicates with C++ code
-------------------------------------------------------------------------------------------

Browser v/s Node:

	Browser: 
		we interact with the DOM
		Web plaform API --> Cookies
		document, windows, etc...
		
	Node:
		we get the access to APIs provided through modules
		developer can control the environment
-----------------------------------------------------------------------
Module: is an encapsulated and reusable chunk of code that has its own context(scope)
In node js, each file is treated as a separate module.

NOTE: Each module is converted into an IIFE by node.

	Type: 
		1. Local --> by me
		2. Built-in -> by node
		3. Third-party -> by some other developer, used by me
		
	By default, modules are isolated

#Local Module: the modules which we create and use in our application.
	--------------------------------------------------------------
	NOTE: we follow CommonJS module format for import and export
	--------------------------------------------------------------
	
Parameters of IIFE by Node --> 
	exports
	require
	module
	__filename
	__dirname
	
--------------------------------------------------------------------------

module.exports vs exports
------------------------
let obj1 = {
  name: "John",
};

let obj2 = obj1;

obj2.name = "Jack";

console.log("obj1", obj1);

// works same as module.exports
// --------------------- same reference --------------------

let object1 = {
  name: "John",
};

let object2 = object1; // reference established

// object2 is assigned to an object literal  ---> reference broke
object2 = {
  name: "Jack",
};

console.log("object1", object1);

// works same as exports


======================================================

ES Modules: 

Is a standard module format given for ECMAScript

Was introduced in ES2015 (ES6)

Node v.14 and above 

The file extension should be .mjs

"export" keyword is used instead of "module.exports"

We can export in 2 ways -> 1. default export, 2. named export

While using default export --> we can use any name while importing

But while using named export --> we have to give same name while importing

----------------------------------------------------------------------
Watch Mode --> node --watch filename
	continuously watch for changes in the file and execute it
----------------------------------------------------------------------

Build-in modules: 
	Provided by node 
	while importing we have to specify node before module name("node:module-name")
	ex of built-in modules:
		fs, path, event, http, etc...
--------------------------------------------------------------------
HTTP module: (Express.js is built on the top of http module)
	
Creating server:
----------------------------------------------------------
	const http = require("node:http");

	const server = http.createServer((req, res) => {
	  res.writeHead(200); // 200 = OK
	  res.end("Hello world");
	});

	server.listen(3000, () => {
	  console.log("Server listening on port 3000");
	});
----------------------------------------------------------
npm -> node package manager --> 

npm registry ---> 

package.json --> Keeps track of the dependencies we need in the development(concise)
package-lock.json --> Keeps track of all the dependencies which are required for
	the dependencies we need(elaborative)

	JSON -> JavaScript Object Notation
	
	{
		key1: value1,
		key2: value2,
		...
	}
	
	[{
		"firstName": "Aman",
		"lastName": "Kamble",
		"age": 16,
		"address": {
			"city": "Amravati",
			"state": "Maharashtra"
		}
		...
	},
	{},
	{}
	]
	
=====================================================================================
ROUTING:
----------------------------------------------------------------
// server

const http = require("node:http");
const fs = require("node:fs");

const obj = {
  firstName: "Aman",
  lastName: "Kamble",
  age: 16,
  addresponses: {
    city: "Amravati",
    state: "Maharashtra",
  },
};

const server = http.createServer((request, response) => {
  const url = request.url;
  if (url === "/home") {
    response.writeHead(200);
    fs.createReadStream("./home.html").pipe(response);
  } else if (url === "/about") {
    response.writeHead(200);
    fs.createReadStream("./about.html").pipe(response);
  } else if (url === "/api") {
    response.writeHead(200);
    response.end(JSON.stringify(obj));
  } else {
    response.writeHead(404);
    fs.createReadStream("./pageNotFound.html").pipe(response);
  }
});

const port = process.env.PORT || 4000;

server.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});

==================================================================================